<?php

namespace MongoDBODMProxies\__CG__\Aevitas\LevisBundle\Document;

use Doctrine\ODM\MongoDB\Persisters\DocumentPersister;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class GiftArticle extends \Aevitas\LevisBundle\Document\GiftArticle implements \Doctrine\ODM\MongoDB\Proxy\Proxy
{
    private $__documentPersister__;
    public $__identifier__;
    public $__isInitialized__ = false;
    public function __construct(DocumentPersister $documentPersister, $identifier)
    {
        $this->__documentPersister__ = $documentPersister;
        $this->__identifier__ = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->__documentPersister__) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->__documentPersister__->load($this->__identifier__, $this) === null) {
                throw \Doctrine\ODM\MongoDB\DocumentNotFoundException::documentNotFound(get_class($this), $this->__identifier__);
            }
            unset($this->__documentPersister__, $this->__identifier__);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getImages()
    {
        $this->__load();
        return parent::getImages();
    }

    public function getImagesUrlArray()
    {
        $this->__load();
        return parent::getImagesUrlArray();
    }

    public function setImages($images)
    {
        $this->__load();
        return parent::setImages($images);
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return $this->__identifier__;
        }
        $this->__load();
        return parent::getId();
    }

    public function setId($Id)
    {
        $this->__load();
        return parent::setId($Id);
    }

    public function setDm($dm)
    {
        $this->__load();
        return parent::setDm($dm);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getFile()
    {
        $this->__load();
        return parent::getFile();
    }

    public function setFile(\Symfony\Component\HttpFoundation\File\UploadedFile $file = NULL)
    {
        $this->__load();
        return parent::setFile($file);
    }

    public function getImage()
    {
        $this->__load();
        return parent::getImage();
    }

    public function prePersist()
    {
        $this->__load();
        return parent::prePersist();
    }

    public function getUploadFolder()
    {
        $this->__load();
        return parent::getUploadFolder();
    }

    public function afterFlush()
    {
        $this->__load();
        return parent::afterFlush();
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getUserId()
    {
        $this->__load();
        return parent::getUserId();
    }

    public function setUserId($userId)
    {
        $this->__load();
        return parent::setUserId($userId);
    }

    public function getCreated()
    {
        $this->__load();
        return parent::getCreated();
    }

    public function setCreated($created)
    {
        $this->__load();
        return parent::setCreated($created);
    }

    public function getPoint()
    {
        $this->__load();
        return parent::getPoint();
    }

    public function setPoint($point)
    {
        $this->__load();
        return parent::setPoint($point);
    }

    public function getIsActive()
    {
        $this->__load();
        return parent::getIsActive();
    }

    public function setIsActive($isActive)
    {
        $this->__load();
        return parent::setIsActive($isActive);
    }

    public function getCategories()
    {
        $this->__load();
        return parent::getCategories();
    }

    public function setCategories($catid)
    {
        $this->__load();
        return parent::setCategories($catid);
    }

    public function getCategory()
    {
        $this->__load();
        return parent::getCategory();
    }

    public function getGender()
    {
        $this->__load();
        return parent::getGender();
    }

    public function setGender($gender)
    {
        $this->__load();
        return parent::setGender($gender);
    }

    public function getInventory()
    {
        $this->__load();
        return parent::getInventory();
    }

    public function setInventory($inventory)
    {
        $this->__load();
        return parent::setInventory($inventory);
    }

    public function getDeliveryType()
    {
        $this->__load();
        return parent::getDeliveryType();
    }

    public function setDeliveryType($DeliveryType)
    {
        $this->__load();
        return parent::setDeliveryType($DeliveryType);
    }

    public function getPath()
    {
        $this->__load();
        return parent::getPath();
    }

    public function setPath($path)
    {
        $this->__load();
        return parent::setPath($path);
    }

    public function getCat()
    {
        $this->__load();
        return parent::getCat();
    }

    public function setCat($cat)
    {
        $this->__load();
        return parent::setCat($cat);
    }

    public function getSlug()
    {
        $this->__load();
        return parent::getSlug();
    }

    public function setSlug($slug)
    {
        $this->__load();
        return parent::setSlug($slug);
    }

    public function getCatid()
    {
        $this->__load();
        return parent::getCatid();
    }

    public function getTags()
    {
        $this->__load();
        return parent::getTags();
    }

    public function setTags($tags)
    {
        $this->__load();
        return parent::setTags($tags);
    }

    public function getTagsArray()
    {
        $this->__load();
        return parent::getTagsArray();
    }

    public function getExcerpt()
    {
        $this->__load();
        return parent::getExcerpt();
    }

    public function setExcerpt($excerpt)
    {
        $this->__load();
        return parent::setExcerpt($excerpt);
    }

    public function getThumbnail($w = 64, $h = 64, $thumb = NULL)
    {
        $this->__load();
        return parent::getThumbnail($w, $h, $thumb);
    }

    public function getTmpFolder()
    {
        $this->__load();
        return parent::getTmpFolder();
    }

    public function postLoad()
    {
        $this->__load();
        return parent::postLoad();
    }

    public function getAbsolutePath($file = NULL)
    {
        $this->__load();
        return parent::getAbsolutePath($file);
    }

    public function getWebPath($file = NULL)
    {
        $this->__load();
        return parent::getWebPath($file);
    }

    public function getMediaDir()
    {
        $this->__load();
        return parent::getMediaDir();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'path', 'description', 'excerpt', 'created', 'point', 'slug', 'isActive', 'gender', 'inventory', 'DeliveryType', 'catid', 'cg', 'cat', 'tags', 'images');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->__documentPersister__) {
            $this->__isInitialized__ = true;
            $class = $this->__documentPersister__->getClassMetadata();
            $original = $this->__documentPersister__->load($this->__identifier__);
            if ($original === null) {
                throw \Doctrine\ODM\MongoDB\MongoDBException::documentNotFound(get_class($this), $this->__identifier__);
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->__documentPersister__, $this->__identifier__);
        }
        
    }
}