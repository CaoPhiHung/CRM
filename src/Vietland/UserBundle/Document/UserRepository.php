<?php

namespace Vietland\UserBundle\Document;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Cache;
use JMS\SecurityExtraBundle\Annotation\Secure;
use Vietland\UserBundle\Document\User;
use Vietland\UserBundle\Document\UserLog;

/**
 * HotelRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends DocumentRepository {

    private $count;

    public function findLastLogs() {
        return $this->createQueryBuilder()
                        ->field('action')->equals(UserLog::BUYITEM)
                        ->limit(5)
                        ->skip(0)->sort('id', 'desc')
                        ->getQuery()
                        ->execute();
        ;
    }

    public function findFromPos($email = '') {
        $qb = $this->createQueryBuilder()
                ->limit(1);
        $qb->field('posId')->exists(false);
        if ("" != $email) {
            $qb->addOr($qb->expr()->field('email')->equals($email));
            return $qb->getQuery()->execute();
        }
        return null;
    }

    public function findPage($uid = 155, $page = 1, $limit = 20) {
        if (!(int) $page)
            $page = 1;
        if (!(int) $limit)
            $limit = 20;
        return $this->createQueryBuilder()
                        ->field('uid')->equals((int) $uid)
                        ->limit((int) $limit)
                        ->skip(((int) $page - 1) * (int) $limit)->sort('id', 'desc')
                        ->getQuery()
                        ->execute();
        ;
    }

    public function findLastOrder($uid = 155, $page = 1, $limit = 20) {
        if (!(int) $page)
            $page = 1;
        if (!(int) $limit)
            $limit = 20;
        $qb = $this->createQueryBuilder()
                ->field('uid')->equals((int) $uid)
                ->field('action')->equals('buyitem')
                ->limit((int) $limit)
                ->skip(((int) $page - 1) * (int) $limit);
        $countQuery = clone $qb;
        $this->count = $countQuery->count()->getQuery()->execute();
        return $qb->getQuery()->execute();
    }

    public function getUsers($page = 1, $limit = 20) {
        if (!(int) $page)
            $page = 1;
        if (!(int) $limit)
            $limit = 20;
        $qb = $this->createQueryBuilder()
                ->field('enabled')->equals(true)
                ->where("function() { return this.roles.length == 0; }")
                ->limit((int) $limit)
                ->skip(((int) $page - 1) * (int) $limit);
        $countQuery = clone $qb;
        $this->count = $countQuery->count()->getQuery()->execute();
        return $qb->getQuery()->execute();
    }

    public function getStaffs($page = 1, $limit = 20) {
        if (!(int) $page)
            $page = 1;
        if (!(int) $limit)
            $limit = 20;
        $qb = $this->createQueryBuilder()
                ->field('enabled')->equals(true)
                ->where("function() { return this.roles.length > 0; }")
                ->limit((int) $limit)
                ->skip(((int) $page - 1) * (int) $limit);
        $countQuery = clone $qb;
        $this->count = $countQuery->count()->getQuery()->execute();
        return $qb->getQuery()->execute();
    }

    public function getCount() {
        return $this->count;
    }

    public function seekUsers($data) {
        $builder = $this->createQueryBuilder();
        $builder->field('enabled')->equals(true)->field('posId')->exists(true)->field('CCode')->exists(true);
        if (isset($data['name'])) {
            $builder->addOr($builder->expr()->field('firstname')->equals(new \MongoRegex('/' . $data['name'] . '/i')));
            $builder->addOr($builder->expr()->field('lastname')->equals(new \MongoRegex('/' . $data['name'] . '/i')));
        }
        $builder->where("function() { return this.roles.length == 0; }");
        if (isset($data['cellphone']))
            $builder->field('cellphone')->equals(new \MongoRegex('/^' . $data['cellphone'] . '/'));
        if (isset($data['CCode']) && $data['CCode'])
            $builder->field('CCode')->equals(new \MongoRegex('/^' . $data['CCode'] . '/'));
        if (isset($data['email']) && $data['email'])
            $builder->field('email')->equals($data['email']);
        if (isset($data['level']) && $data['level'])
            $builder->field('level')->equals((int) $data['level']);
        if (isset($data['fpoint']) && isset($data['spoint'])) {
            $builder->field('point')->lt((int) $data['fpoint'] + 1);
            $builder->field('point')->gt((int) $data['spoint'] - 1);
            $builder->field('point')->sort('desc');
        }

        if (!isset($data['export'])) {
            if (isset($data['amount']))
                $limit = $data['amount'];
            else
                $limit = 25;
            if (isset($data['page']))
                $page = $data['page'];
            else
                $page = 1;

            $builder->limit((int) $limit)
                    ->skip(((int) $page - 1) * (int) $limit)->sort('id', 'desc');
        }
        $countQuery = clone($builder);
        $this->count = $countQuery->count()->getQuery()->execute();
        return $builder
                        ->getQuery()
                        ->execute();
        ;
    }

    public function advancedSeekUsers($data) {
        $builder = $this->createQueryBuilder();
        $builder->field('enabled')->equals(true)->field('posId')->exists(true)->field('CCode')->exists(true);
        if (!empty($data['name'])) {
            $builder->addOr($builder->expr()->field('firstname')->equals(new \MongoRegex('/' . $data['name'] . '/i')));
            $builder->addOr($builder->expr()->field('lastname')->equals(new \MongoRegex('/' . $data['name'] . '/i')));
        }
        $builder->where("function() { return this.roles.length == 0; }");
        if (!empty($data['cellphone']))
            $builder->field('cellphone')->equals(new \MongoRegex('/^' . $data['cellphone'] . '/'));
        if (!empty($data['CCode']) && $data['CCode'])
            $builder->field('CCode')->equals(new \MongoRegex('/^' . $data['CCode'] . '/'));
        if (!empty($data['email']) && $data['email'])
            $builder->field('email')->equals($data['email']);
        if (!empty($data['level']) && $data['level'])
            $builder->field('level')->equals((int) $data['level']);
        if(!empty($data['not_active_day'])){
            $builder->field('lastbuy')->lte(new \DateTime($data['not_active_day']));
        }
            
        if (!empty($data['fcardno']) && !empty($data['tcardno'])) {
                $start=(int)$data['fcardno'];
                $end=(int)$data['tcardno'];
                $builder->field('CCode')->exists(true)
                            ->where("function() { var CCode = this.CCode,start=".$start.",end =".$end.", rt = false;
                if(typeof this.CCode != 'undefined'){
                    if(start <= Number(CCode) && Number(CCode) <= end) rt = true;
                };
                return rt;
                }")->sort('CCode', 'asc');
        }

        if(!empty($data['bday_month'])){
           $month = date("m",strtotime($data['bday_month']));
            $start = new \DateTime("".$month."/01/2015");
            $end = new \DateTime("".$month."/31/2015");
            $last = date('Y-m-t', mktime(0, 0, 0, (int) date('m'), 1, (int) date('Y')));
            $lastDate = new \DateTime($last);
            $lastDate->format('d');
            $builder->field('dob')->exists(true)
                            ->where("function() { var dob = this.dob, start = new Date('" . $start->format('Y-m-d') . "'), end = new Date('" . $end->format('Y-m-d') . ' 23:59:59' . "'), rt = false;
                if(typeof this.dob != 'undefined'){
                    dob.setFullYear('" . $start->format('Y') . "');
                    if(start.getTime() <= dob.getTime() && dob.getTime() <= end.getTime()) rt = true;
                };
                return rt;
                }")->sort('dob', 'asc');
        }

        if(!empty($data['sex'])){
            $builder->field('sex')->equals((int) $data['sex']);
        }

        if (!empty($data['city'])){
            $builder->field('city')->equals(new \MongoRegex('/.*' . $data['city'] . '.*/i'));
        }

        if (!empty($data['district'])){
            $builder->field('district')->equals(new \MongoRegex('/.*' . $data['district'] . '.*/i'));
        }

        if(!empty($data['mari'])){
            $builder->field('mari')->equals((int) $data['mari']);
        }

        if(!empty($data['status']) || $data['status'] === '0'){
            $status = ($data['status'] == '1') ? true : false;
            $builder->field('enabled')->equals($status);
        }

        if(!empty($data['fjoiningdate']) && !empty($data['tjoiningdate'])){
            $builder->field('join')->gte(new \DateTime($data['fjoiningdate']));
            $builder->field('join')->lte(new \DateTime($data['tjoiningdate']));
        }        

        if (!isset($data['export'])) {
            if (isset($data['amount']))
                $limit = $data['amount'];
            else
                $limit = 25;
            if (isset($data['page']))
                $page = $data['page'];
            else
                $page = 1;

            $builder->limit((int) $limit)
                    ->skip(((int) $page - 1) * (int) $limit)->sort('id', 'desc');
        }
        $countQuery = clone($builder);
        $this->count = $countQuery->count()->getQuery()->execute();
        return $builder
                        ->getQuery()
                        ->execute();
        ;
    }

    public function advancedSeekUsers_bk($data) {
        $builder = $this->createQueryBuilder();
        $builder->field('enabled')->equals(true)->field('posId')->exists(true)->field('CCode')->exists(true);
        if (!empty($data['name'])) {
            $builder->addOr($builder->expr()->field('firstname')->equals(new \MongoRegex('/' . $data['name'] . '/i')));
            $builder->addOr($builder->expr()->field('lastname')->equals(new \MongoRegex('/' . $data['name'] . '/i')));
        }
        $builder->where("function() { return this.roles.length == 0; }");
        if (!empty($data['cellphone']))
            $builder->field('cellphone')->equals(new \MongoRegex('/^' . $data['cellphone'] . '/'));
        if (!empty($data['CCode']) && $data['CCode'])
            $builder->field('CCode')->equals(new \MongoRegex('/^' . $data['CCode'] . '/'));
        if (!empty($data['email']) && $data['email'])
            $builder->field('email')->equals($data['email']);
        if (!empty($data['level']) && $data['level'])
            $builder->field('level')->equals((int) $data['level']);
        if(!empty($data['not_active_day'])){
            $builder->field('lastbuy')->lte(new \DateTime($data['not_active_day']));
        }

        if (!isset($data['export'])) {
            if (isset($data['amount']))
                $limit = $data['amount'];
            else
                $limit = 25;
            if (isset($data['page']))
                $page = $data['page'];
            else
                $page = 1;

            $builder->limit((int) $limit)
                    ->skip(((int) $page - 1) * (int) $limit)->sort('id', 'desc');
        }
        $countQuery = clone($builder);
        $this->count = $countQuery->count()->getQuery()->execute();
        return $builder
                        ->getQuery()
                        ->execute();
        ;
    }

    public function findOneBy(array $criteria) {
        if (is_array(end($criteria))) {
            $qb = $this->createQueryBuilder();
            foreach ($criteria as $or) {
                if (is_array($or))
                    foreach ($or as $key => $value) {
                        $qb->addOr($qb->expr()->field($key)->equals($value));
                    }
            }
            return $qb->limit(1)
                            ->skip(0)
                            ->getQuery()
                            ->execute();
        } else
            return parent::findOneBy($criteria);
    }

}
